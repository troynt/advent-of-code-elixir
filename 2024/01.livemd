# Advent of Code 2024

```elixir
Mix.install([
  {:kino, "~> 0.14.0"},
  {:kino_aoc, "~> 0.1"},
  {:kino_vega_lite, "~> 0.1.11"}
])
```

## Introduction

Proceed with caution! Learning Elixir here, this code may be rough.

## Day 1

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJkYXkxIiwiZGF5IjoiMSIsInNlc3Npb25fc2VjcmV0IjoiQU9DX1NFU1NJT04iLCJ5ZWFyIjoiMjAyNCJ9","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, day1} = KinoAOC.download_puzzle("2024", "1", System.fetch_env!("LB_AOC_SESSION"))
```

```elixir
day1_ex = "3   4
4   3
2   5
1   3
3   9
3   3"
```

```elixir
defmodule Day1 do
  require Integer

  def parse(str) do
    nums = String.split(str, ~r/\W+/, trim: true) |> Enum.map(&String.to_integer/1)
    { Enum.take_every(nums, 2), Enum.drop_every(nums, 2) }
  end

  def solve(str) do
    
    { odds, evens } = parse(str)

    evens = Enum.sort(evens)
    odds = Enum.sort(odds)
    
    
    Enum.zip_reduce(odds,evens, 0, fn a,b,acc ->
      acc = acc + abs(a - b)
      acc
    end)
  end
end
```

```elixir
Day1.parse(day1_ex)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day1.solve(day1_ex)
```

```elixir
Day1.solve(day1)
```

## Part 2

```elixir
Day1.parse(day1_ex)
```

```elixir
{left, right} = Day1.parse(day1)
frequencies = Enum.frequencies(right)
Enum.map(left, fn l -> l * Map.get(frequencies, l, 0) end) |> Enum.sum
```

<!-- livebook:{"offset":1422,"stamp":{"token":"XCP.Os3_5A4QW0F2iecR76MIMxoa7-IlWPD6lmTx9IuzGNG2wtlkPtdqaj2ISVuSc0oKs5QQ4zp-BH4FFA8EzLAnx57YLhS0hLSPxzNqmwBpf7SatNL6Ehx-xWuTgsvVrU0HXQpfJ1xd1E6E","version":2}} -->
